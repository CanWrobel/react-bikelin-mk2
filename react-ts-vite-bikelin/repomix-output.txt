This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-13T21:10:01.072Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.tsx
src/assets/react.svg
src/components/header/BurgerMenu.tsx
src/components/MainScreen.tsx
src/components/map/MapComponent.tsx
src/contexts/IncidentsContext.tsx
src/contexts/UserContext.tsx
src/index.css
src/main.tsx
src/services/auth-service.tsx
src/types/Incidents.ts
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*
.env
node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "react-ts-vite-bikelin",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "start": "react-scripts start --port 3000",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "dev": "vite --port 4200",
    "build": "tsc -b && vite build --port 3000",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@google/markerclustererplus": "^5.1.3",
    "@react-google-maps/api": "^2.20.3",
    "dotenv": "^16.4.7",
    "keycloak-js": "^26.0.7",
    "leaflet": "^1.9.4",
    "react": "^18.3.1",
    "react-burger-menu": "^3.1.0",
    "react-dom": "^18.3.1",
    "react-leaflet": "^4.2.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-burger-menu": "^2.8.7",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.15.0",
    "vite": "^6.0.1"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: src/App.css
================
label {
  color: #333;  /* Dunkelgraue Schriftfarbe für bessere Lesbarkeit */
  display: block;  /* Jedes Label wird als Block angezeigt, damit die Eingabefelder darunter erscheinen */
  margin-bottom: 5px;  /* Etwas Abstand unter jedem Label */
}



/* Stil für den gesamten Bildschirm */
.container {
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  background-color: white;
}

.header {
  height: 10%;
  background-color: #f8f9fa;
  display: flex;
  align-items: center;
  padding-left: 20px;
}

.header button {
  margin-right: 20px; /* Abstand zwischen Button und Titel */
}

.header h3 {
  margin: 0; /* Entfernt den Standardabstand um die Überschrift */
  color: #333; /* Farbe der Überschrift */
}


/* Hauptbereich für Map und Menü */
.main-area {
  height: 90%;
  position: relative;
}

.burgerMenu {
  position: absolute;
  top: 10%; /* Beginnt unterhalb des Headers */
  left: 0;
  width: 250px;
  height: 90%; /* Passt sich an die verbleibende Höhe an */
  transition: transform 0.3s ease;
  transform: translateX(-100%);
  background-color: white; /* Hintergrundfarbe des Menüs */
  z-index: 1000;
  padding: 20px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column; /* Ordnet die Elemente vertikal an */
  align-items: start; /* Ausrichtung der Links am Start der Spalte */
  font-family: Arial, sans-serif; /* Stil des Textes, angepasst am Titel */
  font-size: 16px; /* Größe des Textes */
}

.burgerMenu.active {
  transform: translateX(0);
}

.burgerMenu a {
  display: block; /* Stellt sicher, dass jeder Link als Blockelement dargestellt wird */
  color: #333; /* Dunkelgraue Textfarbe */
  text-decoration: none; /* Keine Unterstreichung */
  padding: 8px 0; /* Abstand oben und unten */
  width: 100%; /* Sichert, dass der Link die volle Breite einnimmt */
}



/* Map Container Stil */
.mapContainer {
  height: 100%;
  transition: margin-left 0.3s ease;
}

.mapContainer.menuActive {
  margin-left: 250px;
}

================
File: src/App.tsx
================
import React from 'react';
import './App.css';
import MainScreen from './components/MainScreen'; 
import { useEffect } from 'react';
import { UserProvider } from './contexts/UserContext';

const App = () => {
  useEffect(() => {
    document.title = "Bikelin-Navigator 2.0";
  }, []);

  return (
    <div className="container">
      <UserProvider>
        <MainScreen />
      </UserProvider>
    </div>
  );
}

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/header/BurgerMenu.tsx
================
import React, { useEffect, useState } from 'react';
import keycloak from '../../services/auth-service';
import { useUser } from '../../contexts/UserContext';

const BurgerMenu: React.FC<{ toggleMenu: () => void }> = ({ toggleMenu }) => {
  const { username, setUsername } = useUser();
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const checkAuthentication = async () => {
      const authenticated = await keycloak.init({ onLoad: 'check-sso' });
      setIsAuthenticated(authenticated);
      if (authenticated) {
        setUsername(keycloak.tokenParsed.name);
      } else {
        setUsername(null);
      }
    };

    checkAuthentication();

    keycloak.onAuthLogout = () => {
      setIsAuthenticated(false);
      setUsername(null);
    };
    keycloak.onAuthSuccess = () => {
      console.log("Auth Success. Token Parsed:", keycloak.tokenParsed); 
      setIsAuthenticated(true);
      setUsername(keycloak.tokenParsed.name);
    };

    return () => {
      keycloak.onAuthLogout = undefined;
      keycloak.onAuthSuccess = undefined;
    };
  }, [setUsername]);

  const handleLoginLogout = () => {
    if (isAuthenticated) {
      keycloak.logout();
    } else {
      keycloak.login();
    }
  };

  return (
    <div>
      <button onClick={toggleMenu}>Close</button>
      <a href="/">Home</a>
      <a href="/about">About Us</a>
      <a href="/contact">Contact Us</a>
      {username && <p>Hello, {username}</p>}
      <button onClick={handleLoginLogout}>
        {isAuthenticated ? 'Log Out' : 'Log In'}
      </button>
    </div>
  );
};

export default BurgerMenu;

================
File: src/components/MainScreen.tsx
================
import React, { useState } from 'react';
import MapComponent from './map/MapComponent';
import BurgerMenu from './header/BurgerMenu';
import { useUser } from '../contexts/UserContext'; // Importiere die Hook

const MainScreen: React.FC = () => {
  const [menuActive, setMenuActive] = useState(false);
  const { username } = useUser(); // Benutze die Hook, um den Benutzernamen zu erhalten

  const toggleMenu = () => {
    setMenuActive(!menuActive);
  };

  return (
    <div className="container">
      <div className="header">
        <button onClick={toggleMenu}>☰</button>
        <h3>Bikelin-Navigator 2.0 {username ? `Hallo, ${username}` : ''}</h3> 
      </div>
      <div className="main-area">
        <div className={`burgerMenu ${menuActive ? 'active' : ''}`}>
          <BurgerMenu toggleMenu={toggleMenu} />
        </div>
        <div className={`mapContainer ${menuActive ? 'menuActive' : ''}`}>
          <MapComponent />
        </div>
      </div>
    </div>
  );
}

export default MainScreen;

================
File: src/components/map/MapComponent.tsx
================
import React, { useEffect, useState } from 'react';
import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';
import { Incident } from '../../types/Incidents'; // Stelle sicher, dass der Pfad zu deiner Incident-Typdefinition korrekt ist.

const containerStyle = {
  width: '100%',
  height: '100vh'  // Setze die Höhe auf 100% des Viewport Height
};

const center = {
  lat: 52.5200,  // Zentrum der Karte (Berlin)
  lng: 13.4050
};

const MapComponent: React.FC = () => {
  const [incidents, setIncidents] = useState<Incident[]>([]);
  const [selectedIncident, setSelectedIncident] = useState<Incident | null>(null);

  useEffect(() => {
    fetch('http://141.45.146.183:8080/bikelin/api/incidents')
      .then(response => response.json())
      .then(data => {
        console.log("Geladene Incidents:", data);  // Logging der geladenen Daten zur Überprüfung
        setIncidents(data);
      })
      .catch(error => console.error('Error fetching incidents:', error));
  }, []);

  return (
    <LoadScript
      googleMapsApiKey={import.meta.env.VITE_GOOGLE_MAPS_API_KEY}  // Stellen Sie sicher, dass Ihr API-Schlüssel korrekt ist
    >
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={center}
        zoom={10}
      >
        {incidents.map((incident) => (
          <Marker
            key={incident._id}
            position={{ lat: incident.latitude, lng: incident.longitude }}
            onClick={() => setSelectedIncident(incident)}
          />
        ))}
   {selectedIncident && (
  <InfoWindow
    position={{ lat: selectedIncident.latitude, lng: selectedIncident.longitude }}
    onCloseClick={() => setSelectedIncident(null)}
  >
    <div style={{ color: 'black', fontSize: '16px', maxWidth: '300px' }}>
      <h2>{selectedIncident.title}</h2>
      <p>{selectedIncident.description}</p>
      <p><strong>Datum:</strong> {selectedIncident.date} um {selectedIncident.time}</p>
      <p><strong>Adresse:</strong> {selectedIncident.street}, {selectedIncident.zip} {selectedIncident.city}</p>
      <p><strong>Gefahrenstufe:</strong> {selectedIncident.dangerLevel}</p>
      <p><strong>Kategorie:</strong> {selectedIncident.category} ({selectedIncident.timeCategory})</p>
      {selectedIncident.username && <p><strong>Eingereicht von:</strong> {selectedIncident.username}</p>}
      {selectedIncident.image && <p><strong>Bild:</strong> <img src={`http://141.45.146.183:8080/bikelin/api/image/${selectedIncident.image}`} alt="Incident" style={{ width: '100%' }} /></p>}
      {/* Weitere Felder hinzufügen, die angezeigt werden sollen */}
    </div>
  </InfoWindow>
)}

      </GoogleMap>
    </LoadScript>
  );
}

export default MapComponent;

================
File: src/contexts/IncidentsContext.tsx
================
// src/contexts/IncidentsContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { Incident } from '../types/Incidents';

interface IncidentsContextType {
  incidents: Incident[];
  setIncidents: React.Dispatch<React.SetStateAction<Incident[]>>;
  toggleVisibility: () => void;
  isVisible: boolean;
}

const IncidentsContext = createContext<IncidentsContextType | undefined>(undefined);

export const IncidentsProvider: React.FC<{children: ReactNode}> = ({ children }) => {
  const [incidents, setIncidents] = useState<Incident[]>([]);
  const [isVisible, setIsVisible] = useState(true);

  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  return (
    <IncidentsContext.Provider value={{ incidents, setIncidents, toggleVisibility, isVisible }}>
      {children}
    </IncidentsContext.Provider>
  );
};

export const useIncidents = () => {
  const context = useContext(IncidentsContext);
  if (!context) {
    throw new Error('useIncidents must be used within a IncidentsProvider');
  }
  return context;
};

================
File: src/contexts/UserContext.tsx
================
import React, { createContext, useContext, useState } from 'react';

const UserContext = createContext({
  username: null,
  setUsername: () => {}
});

export const UserProvider = ({ children }) => {
  const [username, setUsername] = useState(null);

  return (
    <UserContext.Provider value={{ username, setUsername }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);

================
File: src/index.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/services/auth-service.tsx
================
import Keycloak from 'keycloak-js';

const keycloakConfig = {
  url: 'http://141.45.146.183:8090/auth',
  realm: 'BikeNavigator',
  clientId: 'AngularBikeNavigator',
  redirectUri: 'http://localhost:4200', 
  postLogoutRedirectUri: 'http://localhost:4200', 
};

const keycloak = new Keycloak(keycloakConfig);

export const initKeycloak = () => {
  return keycloak.init({
    onLoad: 'login-required',
    checkLoginIframe: false
  });
};

export default keycloak;

================
File: src/types/Incidents.ts
================
export interface Incident {
    _id: string;
    title: string;
    longitude: number;
    latitude: number;
    description?: string;
    date?: string;
    time?: string;
    category?: string;
    timeCategory?: string;
    street?: string;
    zip?: number;
    city?: string;
    username?: string;
    image?: string;
    incident_id?: number;
    __v?: number;
    dangerLevel: string;
  }

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
